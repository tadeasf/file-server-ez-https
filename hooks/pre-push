#!/usr/bin/env python3
import sys
import subprocess
from pathlib import Path

"""
This script ensures the .env file remains encrypted during push
and handles decryption afterward only if we encrypted it during commit.

To install the dotenvx CLI, run:
npm install -g @dotenvx/dotenvx
"""

def verify_env_encryption():
    env_path = Path('.env')
    encryption_marker = Path('.env.encrypted')
    
    # Check if .env exists
    if not env_path.exists():
        print("📝 No .env file found")
        return 0
    
    try:
        # Verify the file is encrypted
        with open(env_path, 'r') as f:
            content = f.read()
            
        if 'encrypted:' not in content:
            print("❌ ERROR: Attempting to push unencrypted .env file!")
            print("🔒 Please commit your changes first to trigger encryption")
            return 1
        
        print("✅ Verified .env is encrypted for push")
        
        # If we have the encryption marker, schedule decryption after push
        if encryption_marker.exists():
            print("🔓 Scheduling decryption after push...")
            
            # Remove the marker file
            encryption_marker.unlink()
            
            # Schedule decryption to happen after push completes
            subprocess.Popen(
                ['sh', '-c', 'sleep 2 && dotenvx decrypt && echo "✅ .env decrypted after push"'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
        
        return 0
        
    except FileNotFoundError:
        print("❌ Error: dotenvx command not found.")
        print("🔧 Please install dotenvx CLI with: npm install -g @dotenvx/dotenvx")
        return 1

if __name__ == '__main__':
    print("🔐 Running pre-push hook for .env verification...")
    sys.exit(verify_env_encryption())

